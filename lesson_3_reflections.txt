When would you want to use a remote repository rather than keeping all your work local?
- in general when I want to share my work with other people. When there are multiple people collaborating
  on the same project - this will allow for all of them to have easy access to shared project
- it also servers as a backup, so it has meaning even if it is only a single person project

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
- I might have my own changes that are not compatible with some other stuff that has been commited to the remote repo.
- in theory remote can also contain code/work that is not working and can mess up my work

Describe the differences between forks, clones, and branches. When would you use one instead of another?
- fork is GitHub doing clone on git repo. + keeping some other references as how many people did the repo fork 
  and also each fork holds a reference to original 
- clones copies the whole repository from one place to another, could from remote server to local pc, or just from 
  two different location on the same PC
- branches are in a single repository... we had them before.. 
- fork is relevant to GitHub, you use it when you want to have own copy of someone elses project (most of the time anyway),
  clone is used when you want to copy the repository from one location to other and branches are used for different project 
  paths, etc..

What is the benefit of having a copy of the last known state of the remote stored locally?
- we know what changes have been done, can check them against our current version and merge what and if something needs it..

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
- I would be using some different repo system. It would be definitely more difficult
- Perhaps easier would be the fact that it would not be neccessary to learn the git control
- harder will be basically everything else - sharing, mergin, tracking changes, etc..

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
- we already had this question... 
- when I want to test a new functionality that may or may not make it or its development will take a longer time
- when I need a stable master at any time.. and only merging the changes from other branches when they are 'safe'
- when collaborating with multiple people... everybody works on his own branch and when the work is done it can be merged into master